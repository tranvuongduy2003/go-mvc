version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dev-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: go_mvc_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d go_mvc_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dev-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NATS Message Broker
  nats:
    image: nats:2.10-alpine
    container_name: dev-nats
    restart: unless-stopped
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["-js", "-m", "8222"]
    networks:
      - dev-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8222/",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application API
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: dev-api
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - APP_ENVIRONMENT=development
      - DATABASE_PRIMARY_HOST=postgres
      - DATABASE_PRIMARY_PORT=5432
      - DATABASE_PRIMARY_USERNAME=postgres
      - DATABASE_PRIMARY_PASSWORD=postgres
      - DATABASE_PRIMARY_NAME=go_mvc_dev
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_URL=nats://nats:4222
      - LOGGER_LEVEL=debug
      - LOGGER_ENCODING=console
    volumes:
      - .:/app
      - go_mod_cache:/go/pkg/mod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - dev-network

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: dev-worker
    restart: unless-stopped
    environment:
      - APP_ENVIRONMENT=development
      - DATABASE_PRIMARY_HOST=postgres
      - DATABASE_PRIMARY_PORT=5432
      - DATABASE_PRIMARY_USERNAME=postgres
      - DATABASE_PRIMARY_PASSWORD=postgres
      - DATABASE_PRIMARY_NAME=go_mvc_dev
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_URL=nats://nats:4222
      - LOGGER_LEVEL=debug
      - LOGGER_ENCODING=console
    volumes:
      - .:/app
      - go_mod_cache:/go/pkg/mod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - dev-network
    command: ["air", "-c", ".air.worker.toml"]

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: dev-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - dev-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: dev-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - dev-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: dev-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - dev-network

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dev-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dev.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - dev-network

  # MailCatcher for Email Testing
  mailcatcher:
    image: schickling/mailcatcher:latest
    container_name: dev-mailcatcher
    restart: unless-stopped
    ports:
      - "1080:1080" # Web interface
      - "1025:1025" # SMTP server
    networks:
      - dev-network

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: dev-traefik
    restart: unless-stopped
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
    ports:
      - "80:80" # HTTP
      - "8080:8080" # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./configs/traefik:/etc/traefik/dynamic:ro
    networks:
      - dev-network
    labels:
      - traefik.enable=true

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: dev-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_BROWSER_REDIRECT_URL: http://minio.localhost
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    volumes:
      - minio_data:/data
    networks:
      - dev-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.minio-api.rule=Host(`cdn.localhost`)
      - traefik.http.routers.minio-api.entrypoints=web
      - traefik.http.routers.minio-api.service=minio-api
      - traefik.http.services.minio-api.loadbalancer.server.port=9000
      - traefik.http.routers.minio-console.rule=Host(`minio.localhost`)
      - traefik.http.routers.minio-console.entrypoints=web
      - traefik.http.routers.minio-console.service=minio-console
      - traefik.http.services.minio-console.loadbalancer.server.port=9001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  pgadmin_data:
  go_mod_cache:
  minio_data:

networks:
  dev-network:
    driver: bridge
